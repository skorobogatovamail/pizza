generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

model User {
    id               Int               @id @default(autoincrement())
    fullname         String
    email            String            @unique
    password         String
    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?
    role             UserRole          @default(USER)
    provider         String?
    providerId       String?
    verified         DateTime
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
}

model Category {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Ingredient {
    id         Int        @id @default(autoincrement())
    name       String     @unique
    price      Int
    imageUrl   String
    product    Product[]
    cartItem   CartItem[]
    cartItemId Int?
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
}

model Product {
    id           Int           @id @default(autoincrement())
    name         String
    imageUrl     String
    category     Category?     @relation(fields: [categoryId], references: [id])
    categoryId   Int?
    ingredients  Ingredient[]
    productItems ProductItem[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model ProductItem {
    id        Int       @id @default(autoincrement())
    product   Product?  @relation(fields: [productId], references: [id])
    productId Int?
    price     Int
    size      Int?
    pizzaType String?
    cartItem  CartItem?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Cart {
    id          Int        @id @default(autoincrement())
    user        User?      @relation(fields: [userId], references: [id])
    userId      Int?       @unique
    token       String?
    cartItems   CartItem[]
    totalAmount Int        @default(0)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model CartItem {
    id            Int          @id @default(autoincrement())
    cart          Cart?        @relation(fields: [cartId], references: [id])
    cartId        Int?         @unique
    productItem   ProductItem  @relation(fields: [productItemId], references: [id])
    productItemId Int          @unique
    quantity      Int          @default(1)
    ingredients   Ingredient[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model Order {
    id          Int         @id @default(autoincrement())
    user        User?       @relation(fields: [userId], references: [id])
    userId      Int?
    token       String
    totalAmount Int
    status      OrderStatus
    paymentId   String?
    items       Json
    fullName    String
    email       String
    phone       String
    address     String
    comment     String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model VerificationCode {
    id     Int  @id @default(autoincrement())
    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
